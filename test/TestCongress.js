const MyCongress = artifacts.require('Congress.sol');
var Configuration = artifacts.require('Configuration.sol');
var Registry = artifacts.require('registries/ProposalRegistry.sol');
var Executor = artifacts.require('./mock/ExecutorMock.sol');
var VotingStrategy = artifacts.require('./mock/VotingStrategyMock.sol');
var VotingRights = artifacts.require('voting/WhitelistRights.sol');

const utils = require('./helpers/Utils.js');

let congress, config, repo, factory;

contract('Congress', function (accounts) {

    let shouldntFail = function (err) {
        assert.isFalse(!!err);
    };

    beforeEach(async () => {
        config = await Configuration.new();
        repo = await Registry.new();
        let executor = await Executor.new();
        let votingStrategy = await VotingStrategy.new();
        let votingRights = await VotingRights.new([accounts[0]]);

        await repo.add(
            "foo",
            executor.address,
            "0x60606040526005805460ff19169055341561001957600080fd5b6040516108543803806108548339810160405280805190910190505b60005b60008054600160a060020a03191633600160a060020a03161790555b5060005b81518110156100c257600280546001810161007383826100ca565b91600052602060002090602091828204019190065b84848151811061009457fe5b90602001906020020151909190916101000a81548160ff021916908360ff160217905550505b600101610058565b5b5050610125565b8154818355818115116100fe57601f016020900481601f016020900483600052602060002091820191016100fe9190610104565b5b505050565b61012291905b8082111561011e576000815560010161010a565b5090565b90565b610720806101346000396000f300606060405236156100d85763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302d05d3f81146100dd578063061ad62a1461010c57806312424e3f1461014157806319d40b081461015657806328f371aa1461017d57806329dcb0cf146101a45780632f54bf6e146101c9578063350580ea146101fc57806373645a91146102635780638da5cb5b14610278578063905a1a74146102a7578063b3f98adc146102d4578063beb4a6e5146102ef578063da58c7d91461031b578063f2fde38b1461034d575b600080fd5b34156100e857600080fd5b6100f061036e565b604051600160a060020a03909116815260200160405180910390f35b341561011757600080fd5b61012b600160a060020a036004351661037d565b60405160ff909116815260200160405180910390f35b341561014c57600080fd5b61015461039f565b005b341561016157600080fd5b6101696103c4565b604051901515815260200160405180910390f35b341561018857600080fd5b6101696103cd565b604051901515815260200160405180910390f35b34156101af57600080fd5b6101b76103d7565b60405190815260200160405180910390f35b34156101d457600080fd5b610169600160a060020a03600435166103de565b604051901515815260200160405180910390f35b341561020757600080fd5b61020f6103f5565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561024f5780820151818401525b602001610236565b505050509050019250505060405180910390f35b341561026e57600080fd5b61015461045e565b005b341561028357600080fd5b6100f0610480565b604051600160a060020a03909116815260200160405180910390f35b34156102b257600080fd5b61016960ff6004351661048f565b604051901515815260200160405180910390f35b34156102df57600080fd5b61015460ff600435166104f7565b005b34156102fa57600080fd5b61012b6004356105f1565b60405160ff909116815260200160405180910390f35b341561032657600080fd5b6100f0600435610624565b604051600160a060020a03909116815260200160405180910390f35b341561035857600080fd5b610154600160a060020a0360043516610656565b005b600354600160a060020a031681565b600160a060020a03811660009081526007602052604090205460ff165b919050565b6103a8336103de565b15156103b357600080fd5b6005805460ff191660011790555b5b565b60055460ff1681565b60055460ff165b90565b6004545b90565b600054600160a060020a038281169116145b919050565b6103fd610697565b600180548060200260200160405190810160405280929190818152602001828054801561045357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311610435575b505050505090505b90565b610467336103de565b151561047257600080fd5b6005805460ff191690555b5b565b600054600160a060020a031681565b6000805b6002548110156104ec578260ff166002828154811015156104b057fe5b90600052602060002090602091828204019190065b9054906101000a900460ff1660ff1614156104e357600191506104f1565b5b600101610493565b600091505b50919050565b6105008161048f565b151561050857fe5b60055460ff16151561051957600080fd5b600160a060020a03331660009081526006602052604090205460ff161561053f57600080fd5b6001805480820161055083826106a9565b916000526020600020900160005b8154600160a060020a033381166101009390930a838102910219909116179091556000818152600760209081526040808320805460ff881660ff1991821617909155600690925291829020805490911660011790559091507f14075e33dffdc00c1fcaf75d0f86d667170be57fb566b12b41b499e5fa53b1259083905160ff909116815260200160405180910390a25b50565b60028054829081106105ff57fe5b90600052602060002090602091828204019190065b915054906101000a900460ff1681565b600180548290811061063257fe5b906000526020600020900160005b915054906101000a9004600160a060020a031681565b61065f336103de565b151561066a57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0383161790555b5b50565b60206040519081016040526000815290565b8154818355818115116106cd576000838152602090206106cd9181019083016106d3565b5b505050565b6103d491905b808211156106ed57600081556001016106d9565b5090565b905600a165627a7a72305820eca68563075eeee6688b6ed6a872d85167b5309136d208699c395f92b46cee020029",
            "0x0"
        );
        congress = await MyCongress.new(
            config.address,
            repo.address,
            votingRights.address,
            votingStrategy.address
         );
    });

    it('should allow me to propose', async () => {
        let result = await congress.propose(
            "foo",
            "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
        );

        assert.equal(result.logs[0].event, 'ProposalCreated', 'proposal was not added');
    });

});
