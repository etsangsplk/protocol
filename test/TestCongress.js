const MyCongress = artifacts.require('Congress.sol');
var Configuration = artifacts.require('Configuration.sol');
var Registry = artifacts.require('registries/ProposalRegistry.sol');
var Executor = artifacts.require('./mock/ExecutorMock.sol');
var VotingStrategy = artifacts.require('./mock/VotingStrategyMock.sol');
var VotingRights = artifacts.require('voting/WhitelistRights.sol');

const utils = require('./helpers/Utils.js');

let congress, config, repo, factory;

contract('Congress', function (accounts) {

    let shouldntFail = function (err) {
        assert.isFalse(!!err);
    };

    beforeEach(async () => {
        config = await Configuration.new();
        repo = await Registry.new();
        let executor = await Executor.new();
        let votingStrategy = await VotingStrategy.new();
        let votingRights = await VotingRights.new([accounts[0]]);

        await repo.add("foo", executor.address, "0x0");
        congress = await MyCongress.new(
            config.address,
            repo.address,
            votingRights.address,
            votingStrategy.address
         );
    });

    it('should allow me to propose', async () => {
        let result = await congress.propose(
            "foo",
            '0x6060604052341561000f57600080fd5b604051610858380380610858833981016040528080518201919050505b60008090505b81518110156100a5576001805480600101828161004f91906100ad565b91600052602060002090602091828204019190065b848481518110151561007257fe5b90602001906020020151909190916101000a81548160ff021916908360ff160217905550505b8080600101915050610032565b5b505061010c565b8154818355818115116100e257601f016020900481601f016020900483600052602060002091820191016100e191906100e7565b5b505050565b61010991905b808211156101055760008160009055506001016100ed565b5090565b90565b61073d8061011b6000396000f3006060604052361561008c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f14610091578063061ad62a146100e657806329dcb0cf14610139578063350580ea14610162578063905a1a74146101cd578063b3f98adc1461020b578063beb4a6e514610231578063da58c7d91461026e575b600080fd5b341561009c57600080fd5b6100a46102d1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156100f157600080fd5b61011d600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506102f7565b604051808260ff1660ff16815260200191505060405180910390f35b341561014457600080fd5b61014c61034e565b6040518082815260200191505060405180910390f35b341561016d57600080fd5b610175610359565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156101b95780820151818401525b60208101905061019d565b505050509050019250505060405180910390f35b34156101d857600080fd5b6101f1600480803560ff169060200190919050506103ee565b604051808215151515815260200191505060405180910390f35b341561021657600080fd5b61022f600480803560ff16906020019091905050610462565b005b341561023c57600080fd5b6102526004808035906020019091905050610638565b604051808260ff1660ff16815260200191505060405180910390f35b341561027957600080fd5b61028f600480803590602001909190505061066c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b600060035490505b90565b6103616106ac565b60008054806020026020016040519081016040528092919081815260200182805480156103e357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610399575b505050505090505b90565b600080600090505b600180549050811015610457578260ff1660018281548110151561041657fe5b90600052602060002090602091828204019190065b9054906101000a900460ff1660ff161415610449576001915061045c565b5b80806001019150506103f6565b600091505b50919050565b61046b816103ee565b151561047357fe5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156104cc57600080fd5b600080548060010182816104e091906106c0565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f14075e33dffdc00c1fcaf75d0f86d667170be57fb566b12b41b499e5fa53b12582604051808260ff1660ff16815260200191505060405180910390a25b50565b60018181548110151561064757fe5b90600052602060002090602091828204019190065b915054906101000a900460ff1681565b60008181548110151561067b57fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b602060405190810160405280600081525090565b8154818355818115116106e7578183600052602060002091820191016106e691906106ec565b5b505050565b61070e91905b8082111561070a5760008160009055506001016106f2565b5090565b905600a165627a7a7230582011d0afa19cb615492c628c9fd83bdd1c091d99446c8819706fcf748d40817f0800290000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002'
        );


        console.log(await congress.proposals.call());

        assert.equal(result.logs[0].event, 'ProposalCreated', 'proposal was not added');
    });

});
