const MyCongress = artifacts.require('Congress.sol');
var Configuration = artifacts.require('Configuration.sol');
var Registry = artifacts.require('registries/ProposalRegistry.sol');
var Executor = artifacts.require('./mock/ExecutorMock.sol');
var VotingStrategy = artifacts.require('./mock/VotingStrategyMock.sol');
var VotingRights = artifacts.require('voting/WhitelistRights.sol');

const utils = require('./helpers/Utils.js');

let congress, config, repo, factory;

contract('Congress', function (accounts) {

    let shouldntFail = function (err) {
        assert.isFalse(!!err);
    };

    beforeEach(async () => {
        config = await Configuration.new();
        repo = await Registry.new();
        let executor = await Executor.new();
        let votingStrategy = await VotingStrategy.new();
        let votingRights = await VotingRights.new([accounts[0]]);

        await repo.add(
            "foo",
            executor.address,
            "0x60606040526000600560006101000a81548160ff021916908315150217905550341561002a57600080fd5b604051610bea380380610bea833981016040528080518201919050505b60005b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600090505b815181101561010357600280548060010182816100ad919061010b565b91600052602060002090602091828204019190065b84848151811015156100d057fe5b90602001906020020151909190916101000a81548160ff021916908360ff160217905550505b8080600101915050610090565b5b505061016a565b81548183558181151161014057601f016020900481601f0160209004836000526020600020918201910161013f9190610145565b5b505050565b61016791905b8082111561016357600081600090555060010161014b565b5090565b90565b610a71806101796000396000f300606060405236156100d9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806302d05d3f146100de578063061ad62a1461013357806312424e3f1461018657806319d40b081461019b57806328f371aa146101c857806329dcb0cf146101f55780632f54bf6e1461021e578063350580ea1461026f57806373645a91146102da5780638da5cb5b146102ef578063905a1a7414610344578063b3f98adc14610382578063beb4a6e5146103a8578063da58c7d9146103e5578063f2fde38b14610448575b600080fd5b34156100e957600080fd5b6100f1610481565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561013e57600080fd5b61016a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506104a7565b604051808260ff1660ff16815260200191505060405180910390f35b341561019157600080fd5b6101996104fe565b005b34156101a657600080fd5b6101ae610531565b604051808215151515815260200191505060405180910390f35b34156101d357600080fd5b6101db610544565b604051808215151515815260200191505060405180910390f35b341561020057600080fd5b61020861055c565b6040518082815260200191505060405180910390f35b341561022957600080fd5b610255600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610567565b604051808215151515815260200191505060405180910390f35b341561027a57600080fd5b6102826105c1565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156102c65780820151818401525b6020810190506102aa565b505050509050019250505060405180910390f35b34156102e557600080fd5b6102ed610656565b005b34156102fa57600080fd5b610302610689565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561034f57600080fd5b610368600480803560ff169060200190919050506106ae565b604051808215151515815260200191505060405180910390f35b341561038d57600080fd5b6103a6600480803560ff16906020019091905050610722565b005b34156103b357600080fd5b6103c96004808035906020019091905050610913565b604051808260ff1660ff16815260200191505060405180910390f35b34156103f057600080fd5b6104066004808035906020019091905050610947565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561045357600080fd5b61047f600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610987565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690505b919050565b61050733610567565b151561051257600080fd5b6001600560006101000a81548160ff0219169083151502179055505b5b565b600560009054906101000a900460ff1681565b6000600560009054906101000a900460ff1690505b90565b600060045490505b90565b60008173ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161490505b919050565b6105c96109e0565b600180548060200260200160405190810160405280929190818152602001828054801561064b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610601575b505050505090505b90565b61065f33610567565b151561066a57600080fd5b6000600560006101000a81548160ff0219169083151502179055505b5b565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b600280549050811015610717578260ff166002828154811015156106d657fe5b90600052602060002090602091828204019190065b9054906101000a900460ff1660ff161415610709576001915061071c565b5b80806001019150506106b6565b600091505b50919050565b61072b816106ae565b151561073357fe5b600560009054906101000a900460ff16151561074e57600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515156107a757600080fd5b600180548060010182816107bb91906109f4565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908360ff1602179055506001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f14075e33dffdc00c1fcaf75d0f86d667170be57fb566b12b41b499e5fa53b12582604051808260ff1660ff16815260200191505060405180910390a25b50565b60028181548110151561092257fe5b90600052602060002090602091828204019190065b915054906101000a900460ff1681565b60018181548110151561095657fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61099033610567565b151561099b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5b50565b602060405190810160405280600081525090565b815481835581811511610a1b57818360005260206000209182019101610a1a9190610a20565b5b505050565b610a4291905b80821115610a3e576000816000905550600101610a26565b5090565b905600a165627a7a723058204e95591df942a38105f3eb76a313146f157a76ecdc9cd0990a6a87135e7dc4df0029",
            "0x0"
        );
        congress = await MyCongress.new(
            config.address,
            repo.address,
            votingRights.address,
            votingStrategy.address
         );
    });

    it('should allow me to propose', async () => {
        let result = await congress.propose(
            "foo",
            "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002"
        );

        assert.equal(result.logs[0].event, 'ProposalCreated', 'proposal was not added');
    });

});
